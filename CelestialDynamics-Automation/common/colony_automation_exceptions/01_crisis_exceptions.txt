# /* empire_wide_emergency = yes seems to take priority over emergency = yes */

# /* Building */ /* This seems to work pretty good even though it spams all planets.. might have to find a workaround for that. Either limit to a designation or whatever */
# /* Altough checking for jobs first seems to limit it quite well */
automate_food_deficit_management_building = {
	available = {
		owner = { has_monthly_income = { resource = food value < 1 } }
		free_building_slots > 0
	}

	emergency = yes
	category = "planet_automation_food_management"

	buildings = {
		food_processing_facility = {
			building = building_food_processing_facility
			available = {
				planet = { num_free_districts = { type = district_farming value <= 0 } }
				planet = { num_districts = { type = district_farming value >= 3 } }
			}
		}

		hydroponics_farm = {
			building = building_hydroponics_farm
			available = { # /* you really want to be building science/unity buildings instead of farms on those designations */
				has_research_designation = no
				has_unity_designation = no
				has_fortress_designation = no
				# /* Fill the available jobs first */ /* No idea if planet = { } is actually needed but it seems to work so who cares. I don't */
				planet = { NOT = { has_available_jobs = agri_drone } }
				# /* This seems to block everything if one planet has all the forbidden jobs */
				# /* NOT = { has_forbidden_jobs = agri_drone } */
				# /* Dont build two at the same time */
				NOT = { has_building_construction = building_hydroponics_farm }
			}
		}
	}
}

# /* District */ /* Has to be confirmed to be working somehow */
automate_food_deficit_management_district = {
	available = {
        owner = { has_monthly_income = { resource = food value < 1 } }
		#OR = {
		#	num_free_districts = { type = district_farming value > 0 }
		#	num_free_districts = { type = district_rw_farming value > 0 }
		#	num_free_districts = { type = district_farming_uncapped value > 0 }
		#}
		# /* Don't waste resources and space on this if we still have jobs available */
        #NOT = { has_available_jobs = agri_drone }
		planet = { num_free_districts = { type = district_farming value > 0 } }
	}

	emergency = yes
	category = "planet_automation_food_management"

	prio_districts = {
		district_farming
		district_rw_farming
		district_farming_uncapped
	}
}

# /* Job */ /* This actually seems to... work... CONFIRMED*/
automate_food_deficit_management_job = {
	available = {
		exists = owner
	}

	emergency = yes
	category = "planet_automation_food_management"

	job_changes = {
		agri_drone_reduce = {
			available = {
				owner = { has_monthly_income = { resource = food value > 33 } } # /* Add some buffer between decrease and increase so it doesn't fluctuate as much */
				# /* Do we have any other jobs available for this worker? Otherwise it's pointless. Except for migrating to other planets */
				OR = {		
					has_available_jobs = brain_drone
					has_available_jobs = calculator
					has_available_jobs = artisan_drone
			   		has_available_jobs = fabricator
		    		has_available_jobs = alloy_drone
		   			has_available_jobs = chemist_drone
		   			has_available_jobs = translucer_drone
		    		has_available_jobs = gas_refiner_drone
		    		has_available_jobs = crystal_mining_drone
		    		has_available_jobs = mote_harvesting_drone
		    		has_available_jobs = gas_extraction_drone
		    		has_available_jobs = mining_drone
		    		has_available_jobs = technician_drone
				}
			}

			job = agri_drone
			amount = -1
		}

		agri_drone_increase = {
			available = {
				OR = {
					AND = {
						owner = { has_monthly_income = { resource = food value < 1 } }
						has_forbidden_jobs = agri_drone
					}
					num_unemployed > 0
				}
			}

			job = agri_drone
			amount = 1
		}
	}
}

#automate_food_to_alloy_conversion = { }

#automate_food_to_energy_conversion = { }

# /* This seems to work pretty good too */
automate_energy_deficit_management = {
	available = {
		owner = { has_monthly_income = { resource = energy value < 33 } }
		planet = { NOT = { has_available_jobs = technician_drone } }
		#NOT = { has_forbidden_jobs = technician_drone } Drone job has to be handled
	}

	emergency = yes
	category = "planet_automation_energy_management"

	buildings = {
		energy_grid_2 = {
			building = building_energy_grid
			available = {
				planet = { num_free_districts = { type = district_generator value <= 0 } }
				planet = { num_districts = { type = district_generator value >= 3 } }
				free_building_slots > 0
			}
		}
	}

	prio_districts = {
		district_generator
		district_rw_generator
		district_generator_uncapped
	}
}

# /* Observation in vanilla: If all building slots are full + all farming districts full + no housing needed AI doesnt build any more even if there are unemployed pops */
automate_force_industrial_districts_on_farming_planets = { 
	available = {
		has_designation = col_farming
		num_free_districts = { type = district_farming value = 0 }
		# /* Nobody expects unexpected farming districts */
		# num_uncleared_blockers  = 0 /* Needs to be more specific */
		OR = { 
			# /* All available farming and nexus districts have been constructed and there's nothing left */
			num_free_districts = { type = district_nexus value = 0 }
			# /* Built all available farming districts and unlocked all building slots */
			has_unlocked_all_building_slots = yes # /* Custom scripted trigger, probably performance heavy*/
		}
}

	emergency = yes
	category = "planet_automation_force_industrial_districts_on_farming_planets"


	prio_districts = {
		district_industrial
	}
}